<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>Taio 开发笔记</title>
  <atom:link href="https://dev.taio.app/#/cn/feed.xml" rel="self" type="application/rss+xml" />
  <link>https://dev.taio.app/#/cn/</link>
  <description>Taio 开发笔记</description>
   
  <item>
    <title><![CDATA[在过去的几个月里，我们一直在重新思考 Apple 平台上的文本编辑体验，结果是我们放弃了所有我们创建的格式化工具栏，并用新的设计取代了它们。]]></title>
    <link>https://dev.taio.app/#/cn/editor/toolbar-revamp</link>
    <guid isPermaLink="false">https://dev.taio.app/#/cn/editor/toolbar-revamp</guid>
    <description><![CDATA[<blockquote>
<p>在过去的几个月里，我们一直在重新思考 Apple 平台上的文本编辑体验，结果是我们放弃了所有我们创建的格式化工具栏，并用新的设计取代了它们。</p>
</blockquote>
<h2 id="格式化工具栏">格式化工具栏</h2>
<p>这其实是我们曾经引以为豪的事情，我们甚至为此写了一篇<a href="https://dev.taio.app/#/cn/editor/toolbar">文章</a>。然而它的效果并不好，现在来讲讲为什么，针对每个平台。</p>
<h3 id="iphone">iPhone</h3>
<p>用可滚动的工具栏来显示所有格式化选项，看起来是个不错的想法，也很容易实现。但实际上，我们发现用户很难记住按钮的位置，滚动必须精确地停在某个点上，这在触摸屏上很困难。更糟糕的是，由于这种“不稳定”，用户无法训练自己形成“肌肉记忆”。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_1.png" width="360" /></p>
<p>我们最终通过将工具栏固定化，只在上面显示几个按钮，并将大部分的格式化选项放在二级位置（利用 <a href="https://developer.apple.com/documentation/uikit/uiresponder/1621092-inputview">inputView</a>）来改善这个问题。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_28.png" width="360" /></p>
<p>这实际上是一种权衡，但我们认为这是值得做的。在某些情况下，需要多点击一次来触发动作，但得益于肌肉记忆，用户可以更快实现大多数动作。动作现在被有逻辑地分组了，导航的方法也更容易记住。</p>
<p>此外，我们还支持了最新 iOS 上的菜单，它使选项切换更容易，看起来更有原生的风格。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_29.png" width="360" /></p>
<p>根据观察，我们认为长按菜单经常被用户忽略，所以我们让菜单成为主要的操作，可以直接在菜单中滑动来选择一个项目，这要感谢 iOS 上新的<a href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/buttons/">菜单系统</a>。</p>
<h3 id="ipad">iPad</h3>
<p>我们曾经在 iOS 和 iPadOS 上使用相同的工具栏，它的效果“还可以”，因为 iPad 通常有更宽的显示屏，没有上面提到的滚动问题。然而，iPad 上的文本编辑体验已被 Apple 重新设计，在 iPadOS 15 上有一个更简洁的浮动工具栏。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_30.png" width="720" /></p>
<p>使用传统基于 <code>inputAccessoryView</code> 的工具栏仍然是可行的（大多数编辑器仍在使用），但它看起来有点奇怪，而且工具栏占用了大量空间，这对大屏幕来说是一种浪费。更重要的是，它很难看，而且有很多布局相关的毛病。</p>
<p>这个问题的答案很早以前就被揭示了：<a href="https://developer.apple.com/documentation/uikit/uiresponder/1621135-inputassistantitem">inputAssistantItem</a>，在过去的几年中，Apple 已经将其用于许多第一方应用程序，如 Notes 和 Pages。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_31.png" width="360" /></p>
<p>在 iPadOS 14（和没有连接外接键盘的 iPadOS 15）上，它会为原生键盘工具栏增加额外的按钮。如果您在 iPadOS 15 上使用外接键盘，它会看起来非常简洁和紧凑。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_32.png" width="360" /></p>
<p>对于文本格式化，我们使用一个包含常用选项的弹出式窗口，而对于图片和链接等内容的插入，我们则是依靠上述的菜单选项。它的效果非常好，非常适合 Magic Keyboard 和 Apple Pencil 等配件。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_33.png" width="360" /></p>
<h3 id="mac">Mac</h3>
<p>当我们最初使用 <a href="https://developer.apple.com/documentation/uikit/mac_catalyst">Mac Catalyst</a> 技术将我们的 iPad 应用移植到 Mac 上时，我们制作了一个自制的弹出窗口来复制 iOS 上 <a href="https://developer.apple.com/documentation/uikit/uimenucontroller">UIMenuController</a> 的体验。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_34.png" width="360" /></p>
<p>很遗憾，这也是我们后悔做了的事情。这背后的原因是，它不像一个 Mac 应用程序，尽管一些知名的应用程序使用这种风格来进行富文本格式化。当我们选择一大块文本或滚动窗口时，弹出窗口总是意外地显示或隐藏。</p>
<p>为了解决这个问题，我们增加了对上下文菜单和状态栏菜单的支持（同时支持键盘快捷键），毕竟它们看起来更像 Mac 原生该有的体验。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_35.png" width="360" /></p>
<h2 id="总结">总结</h2>
<p>很难为所有 Apple 平台提供一个统一的解决方案，所以我们为每个平台调整了体验。我们不能说它们是完美的，但我们对目前的结果感到满意。</p>
<blockquote>
<p>[!NOTE] 2022 年 4 月 24 日</p>
</blockquote>]]></description>
    <pubDate>Sun, 24 Apr 2022 19:21:01 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[代码编辑器]]></title>
    <link>https://dev.taio.app/#/cn/editor/code-editor</link>
    <guid isPermaLink="false">https://dev.taio.app/#/cn/editor/code-editor</guid>
    <description><![CDATA[<h1 id="代码编辑器">代码编辑器</h1>
<p>Taio 提供了一个完善的 Markdown 编辑器，我们将通过本文来介绍其中的技术细节。</p>
<p>实际上，我们从一开始就没打算“只”做一个 Markdown 编辑器，Markdown 只是代码编辑的一种 <code>模式</code>，编辑器也可以支持其他模式。这样通用的设计提供了极大的灵活性，例如 Taio 支持运行 JavaScript，在编辑 JavaScript 的时候，使用的是同一个编辑器内核，加上不同的 <code>语言特性</code>。</p>
<p>另一方面，尽管 Taio 不是一个通用的代码编辑器，我们仍然为常见的编程语言提供了代码高亮，这可以让用户在浏览相关文件时体验更好。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_17.png" width="360" /></p>
<h2 id="代码高亮">代码高亮</h2>
<p>如果仅针对 Markdown，问题可能并不复杂。但我们的目标是一个通用的代码编辑器，这就需要支持常见语言，Markdown 只是其中之一。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_18.png" width="360" /></p>
<p>与 Web 领域不同的是，在 iOS 生态下我们很难找到完美的开源解决方案，但我们可以从一些高质量项目中获得启发。</p>
<p><strong>纯 Web 技术</strong></p>
<p>也既使用 <code>WebView</code> 封装 <a href="https://highlightjs.org/">highlight.js</a> 或 <a href="https://prismjs.com/">Prism</a> 一类的 Web 项目，开发成本很低，在<strong>阅读代码</strong>时也能取得不错的效果。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb1-1" title="1"><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">&lt;html&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3">  <span class="kw">&lt;head&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> href=</span><span class="st">&quot;default.css&quot;</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;highlight.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="kw">&lt;script&gt;</span>hljs.initHighlightingOnLoad();<span class="kw">&lt;/script&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7">  <span class="kw">&lt;/head&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8">  <span class="kw">&lt;body&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="kw">&lt;pre&gt;&lt;code&gt;</span>const string = &quot;Hello, World!&quot;;<span class="kw">&lt;/code&gt;&lt;/pre&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10">  <span class="kw">&lt;/body&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">&lt;/html&gt;</span></a></code></pre></div>
<p>此类方案很成熟，但如需支持编辑，则很难达到原生编辑器的流畅体验。</p>
<p><strong>纯原生技术</strong></p>
<p>也既完全使用原生技术实现对语言的语法分析，并通过 <a href="https://developer.apple.com/documentation/appkit/textkit">TextKit</a> 渲染出来。可以参考的例子有 <a href="https://github.com/louisdh/savannakit">SavannaKit</a> 和其继任者 <a href="https://github.com/twostraws/Sourceful">Sourceful</a>。</p>
<p>此类方案的缺陷是有太多内容需要自己实现，例如语言的语法定义和编辑器主题。</p>
<p><strong>取长补短</strong></p>
<p>综合 Web 技术的成熟和原生技术的性能是个不错的想法，这样的方案是存在的。</p>
<p>我们可以通过 <a href="https://developer.apple.com/documentation/javascriptcore">JavaScriptCore</a> 高性能地运行上述 JavaScript 项目，将得到的结果用原生的方式渲染出来，<a href="https://github.com/raspu/Highlightr">Highlightr</a> 项目采用的就是这个思路。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">&lt;span</span><span class="ot"> class=</span><span class="st">&quot;hljs-section&quot;</span><span class="kw">&gt;</span># Hi<span class="kw">&lt;/span&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3">Hello, World!</a></code></pre></div>
<p>这类方案可以低成本地得到上百种编程语言的支持，以及几十个编辑器主题。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_19.png" width="360" /></p>
<blockquote>
<p>我们可以从上述项目获得一些方向，但维护自己的实现仍然是值得的投入。毕竟编辑器是核心功能，我们很难去依赖社区有限的投入。</p>
</blockquote>
<h2 id="自动补全">自动补全</h2>
<p>与很多 IDE 类似的，Taio 在编辑 JavaScript 时，可以补全 API、分析类型，甚至高亮同一引用。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_20.png" width="360" /></p>
<p>为了实现这些语言特性，Taio 使用 <a href="https://ternjs.net/">Tern</a> 进行 JavaScript 分析，并通过 TextKit 绘制分析结果。</p>
<p>Tern 是一个为 Node.js 和浏览器实现的 JavaScript 项目，需要一些工作才能在 JavaScriptCore 上使用，我们在之后可能会通过一篇单独的文章进行更详细的介绍。</p>
<blockquote>
<p>通用解决方案：<a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a></p>
</blockquote>
<h2 id="代码格式化">代码格式化</h2>
<p>针对语言对代码格式进行自动调整可以让编辑体验更好，这里举几个例子。</p>
<p><strong>括号自动完成</strong></p>
<p>当用户输入 <code>if (condition) {</code> 然后按下换行之后，出现在编辑器上的应该是：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_21.png" width="360" /></p>
<p>实现这个功能，我们需要用一个栈来进行<a href="https://leetcode.com/problems/valid-parentheses/">括号匹配</a>，然后根据缩进的层级填充空格。</p>
<blockquote>
<p>Taio 也会检测当前代码是基于空格缩进还是 Tab 缩进，进而填充不同的字符。</p>
</blockquote>
<p><strong>列表自动完成</strong></p>
<p>当用户对 Markdown 列表换行之后，编辑器需要自动补全其格式，包括无序列表、有序列表和任务列表。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_22.png" width="360" /></p>
<p>此功能通过检测上一行文本是否匹配一个正则表达式来实现，例如有序列表：</p>
<pre class="regexp"><code>^ *(\\d+)\\. +</code></pre>
<p>将匹配中的第一组数字加一，得到的就是下一行自动补全的列表项。类似的，任务列表使用 <code>^ *- +\\[[ xX]\\] +</code> 来匹配。</p>
<p>以上的例子都使用 <code>UITextViewDelegate</code> 的 <a href="https://developer.apple.com/documentation/uikit/uitextviewdelegate/1618630-textview">shouldChangeTextIn</a> 方法实现：</p>
<pre class="swift"><code>func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -&gt; Bool {
  if text == &quot;\n&quot; {
    // Format the code
    return false
  }
  return true
}</code></pre>
<p><strong>Tab 转换成空格</strong></p>
<p>与很多 IDE 一样，Taio 也支持在键盘上输入 Tab 之后，转换成空格。方法是类似的，仅需在 <code>shouldChangeTextIn</code> 中检测是否输入了 <code>\t</code>。</p>
<blockquote>
<p>支持用户配置 Tab 还是空格，体验可能会更好。</p>
</blockquote>
<h2 id="键盘快捷键">键盘快捷键</h2>
<p><code>UITextView</code> 原生便支持复制粘贴等快捷键，但为了让体验更接近桌面编辑器，我们为 Taio 提供了更丰富的支持：</p>
<ul>
<li><code>⌘ -</code> 缩小字号，<code>⌘ +</code> 放大字号，<code>⌘ 0</code> 重置字号</li>
<li><code>⌘ B</code> 切换粗体，<code>⌘ I</code> 切换斜体，<code>⌘ U</code> 切换下划线</li>
<li><code>⌘ 1</code> 一级标题，<code>⌘ 2</code> 二级标题，<code>⌘ 3</code> 三级标题</li>
<li><code>⌘ [</code> 减少缩进，<code>⌘ ]</code> 增加缩进</li>
</ul>
<p>这些快捷键符合用户直觉，按住 <code>⌘</code> 即可看到所有的使用方式。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_23.png" width="360" /></p>
<p>实现这些仅需重写 <code>UIResponder</code> 的 <a href="https://developer.apple.com/documentation/uikit/uiresponder/1621141-keycommands">keyCommands</a> 方法：</p>
<pre class="swift"><code>override var keyCommands: [UIKeyCommand]? {
  return [
    UIKeyCommand(
      title: &quot;Reset Font Size&quot;,
      image: nil,
      action: #selector(resetFontSize),
      input: &quot;0&quot;,
      modifierFlags: .command,
      propertyList: nil
    )
  ]
}</code></pre>
<blockquote>
<p>需要确保所对应的 UIResponder 可以是 firstResponder。</p>
</blockquote>
<h2 id="字体">字体</h2>
<p>用户可以在 Taio 使用设备上的任何字体：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_24.png" width="360" /></p>
<p>这个功能我们使用 <a href="https://developer.apple.com/documentation/uikit/uifontpickerviewcontroller">UIFontPickerViewController</a> 实现，如需支持用户安装的字体，需在 <code>Info.entitlements</code> 中开启：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">&lt;key&gt;</span>com.apple.developer.user-fonts<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">&lt;array&gt;</span></a>
<a class="sourceLine" id="cb6-3" title="3">  <span class="kw">&lt;string&gt;</span>app-usage<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="kw">&lt;/array&gt;</span></a></code></pre></div>
<p>此外，FontPicker 并没有提供好的方式来选择 <code>systemFont</code>，这将导致恢复默认设置不方便。我们的做法是将 FontPicker 包装到另一个 UIViewController，然后在其左上角添加一个 <code>System Font</code> 按钮。</p>
<blockquote>
<p>此方法会失去搜索栏，可能有更好的方式。</p>
</blockquote>
<p>在显示代码时，我们会默认使用等宽字体：</p>
<pre class="swift"><code>let font: UIFont? = {
  if #available(iOS 13.0, *) {
    return .monospacedSystemFont(ofSize: 15, weight: .regular)
  } else {
    return UIFont(name: &quot;Menlo-Regular&quot;, size: 15)
  }
}()</code></pre>
<h2 id="行距">行距</h2>
<p>我们使用了 <a href="https://developer.apple.com/documentation/uikit/nsmutableparagraphstyle/1524596-lineheightmultiple">lineHeightMultiple</a> 特性实现了文字间距功能：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_25.png" width="360" /></p>
<p>如果造成了文字和光标不对齐的问题，我们可以通过 <code>NSLayoutManager</code> 的 <a href="https://developer.apple.com/documentation/uikit/nslayoutmanager/1403158-drawglyphs">drawGlyphs</a> 方法调整：</p>
<pre class="swift"><code>override func drawGlyphs(forGlyphRange glyphsToShow: NSRange, at origin: CGPoint) {
  // Change origin accordingly
  super.drawGlyphs(forGlyphRange: glyphsToShow, at: origin)
}</code></pre>
<h2 id="行号">行号</h2>
<p>代码编辑器显示行号是非常常见的需求，在 Taio 中也可以打开这个选项：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_26.png" width="360" /></p>
<p>这个功能也是通过自定义 <code>NSLayoutManager</code> 实现的，方法是重写 <a href="https://developer.apple.com/documentation/uikit/nslayoutmanager/1402949-drawbackground">drawBackground</a> 方法，可以参考 <a href="https://github.com/illyabusigin/CYRTextView">CYRTextView</a> 项目。</p>
<blockquote>
<p>同样的，我们还可以实现当前行的高亮效果。</p>
</blockquote>
<h2 id="括号高亮">括号高亮</h2>
<p>前面我们已经提到了查找匹配括号的方法，类似的逻辑可以用来实现 Xcode 中提供的括号高亮功能。</p>
<p>当光标停留在括号旁边时，我们可以查找其对应括号所在位置，并进行高亮显示。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_27.png" width="360" /></p>
<p>这将有助于用户识别一个代码块，或是 Markdown 中的一个链接。</p>
<h2 id="更多内容">更多内容</h2>
<p>以上内容是我们在过去多年项目开发中的经验总结，希望对大家有所帮助。</p>
<p>如果想支持我们，请体验我们的应用 <a href="https://taio.app/cn/">Taio</a>，并让您的朋友知道。</p>
<p>我们会在之后分享更多技术细节，敬请期待。</p>
<blockquote>
<p>[!NOTE] 2020 年 12 月 30 日</p>
</blockquote>]]></description>
    <pubDate>Wed, 30 Dec 2020 23:27:43 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Hello, World!]]></title>
    <link>https://dev.taio.app/#/cn/README</link>
    <guid isPermaLink="false">https://dev.taio.app/#/cn/README</guid>
    <description><![CDATA[<h1 id="hello-world">Hello, World!</h1>
<p>我们是打造 <a href="https://taio.app/cn/">Taio</a> 应用的团队。</p>
<p>在过去的几年里，我们从社区学到了很多东西，是时候回馈大家了。</p>
<p>我们将分享关于 Taio 每一个秘密，包括开发技巧、经验教训、设计思路等。</p>
<p>敬请期待。</p>
<h2 id="注意事项">注意事项</h2>
<p>默认允许您分享我们的文章，不需要先询问，唯一的限制是要保留原文链接。</p>
<h2 id="联系我们">联系我们</h2>
<p>欢迎随时与我们联系：</p>
<ul>
<li>邮箱：<a href="mailto:hi@taio.app">hi@taio.app</a></li>
<li>Twitter：<a href="https://twitter.com/TaioApp">https://twitter.com/TaioApp</a></li>
</ul>]]></description>
    <pubDate>Wed, 30 Dec 2020 14:54:55 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[编辑器工具栏体验]]></title>
    <link>https://dev.taio.app/#/cn/editor/toolbar</link>
    <guid isPermaLink="false">https://dev.taio.app/#/cn/editor/toolbar</guid>
    <description><![CDATA[<h1 id="编辑器工具栏体验">编辑器工具栏体验</h1>
<p>在移动端编辑场景里面，辅助工具栏的体验至关重要，尤其在没有外接键盘辅助的时候。为此，Taio 设计了极为方便的工具栏，可以用它输入符号，或者快速完成一些任务：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_1.png" width="360" /></p>
<p>本文阅读时间需要不到十分钟，希望有能对您有用的部分。</p>
<h2 id="inputaccessoryview">inputAccessoryView</h2>
<p>在 iOS 上面实现这样的工具栏，我们大部分时候都会采用 <code>inputAccessoryView</code>，而不是通过监听键盘位置的方式：</p>
<pre class="swift"><code>textView.inputAccessoryView = UIView(...)</code></pre>
<p>您可以使用任何 <code>UIView</code> 实现这个工具栏，但我们不建议这样做。为了实现像很多系统应用那样与键盘融为一体的工具栏，我们应该使用 <code>UIInputView</code>，并为它提供键盘的风格：</p>
<pre class="swift"><code>textView.inputAccessoryView = UIInputView(..., inputViewStyle: .keyboard)</code></pre>
<p>这样一来，iOS 会自动为您提供和键盘背景完全一致的风格，无需自行管理它的颜色。</p>
<h2 id="安全区域">安全区域</h2>
<p>在连接外接键盘时，用户可以选择性地把软键盘收起来。这个时候，您应该把底部的安全区域考虑进去，像是这样：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_2.png" width="360" /></p>
<p>而不是让 <code>Home Indicator</code> 盖住您的工具栏。</p>
<h2 id="inputview">inputView</h2>
<p>在必要的时候，我们可能需要为 TextView 提供“第二键盘”，比如 Taio 里面的工具面板和短语面板：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_3.png" width="360" /></p>
<p>这个功能是通过覆盖 TextView 的 <code>inputView</code> 实现的：</p>
<pre class="swift"><code>textView.inputView = UIView(...)
textView.reloadInputViews()</code></pre>
<p>值得注意的是，这里有一个极其细节的体验，发生在用户使用部分输入法的时候（例如拼音）。</p>
<p>当输入法的选字区域有一些字的时候，把键盘切换到 <code>inputView</code> 实现的界面，然后再切换回来。这个时候，待选区会突然消失，用户感受到的是键盘高度的<strong>突然</strong>变化。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_4.png" width="720" /></p>
<p>这个问题出现在了绝大多数的应用里面，包括 Apple 提供的第一方应用，但我们没有放过它。</p>
<p>我们注意到：<strong>用户在移动光标之后，这个待选区又会突然回来</strong>。所以我们重写了 <code>setInputView</code> 方法，在检测到回到键盘之后，我们会：</p>
<ul>
<li>把光标移动一格（方向无关紧要）</li>
<li>再移动回来</li>
</ul>
<p>通过这个小把戏，用户感受不到任何突然的变化，一切都很完美。</p>
<h2 id="按键音效">按键音效</h2>
<p>因为操作发生在键盘的扩展区域，把这些操作加上键盘声（用户可选择关掉）是非常自然的事情。</p>
<p><code>UIDevice</code> 有一个 <code>playInputClick</code> 方法，可以通过实现 <code>enableInputClicksWhenVisible</code> 来使用。</p>
<p>不过还有一个更粗暴的方法：</p>
<pre class="swift"><code>AudioServicesPlaySystemSound(1104)</code></pre>
<p><em>It’s pure magic.</em></p>
<h2 id="支持-pointer-交互">支持 Pointer 交互</h2>
<p>因为我们的应用期待用户在一个连接了妙控键盘的 iPad 上使用，所以键盘上的按钮支持触摸板的 <code>Hover</code> 效果就极为重要，用户会非常期待鼠标停在按钮上的时候是有反馈的。</p>
<p>关于这个部分我们不再赘述，您可以在 Apple 开发者官网找到很多 WWDC 课程。</p>
<p>我们尤其推荐：<a href="https://developer.apple.com/videos/play/wwdc2020/10640/">Design for the iPadOS pointer</a>。</p>
<h2 id="分页滚动">分页滚动</h2>
<p>工具栏我们使用普通的 <code>UIScrollView</code> 实现，它可以很好地工作，但我们希望对滚动进行进一步的优化。</p>
<p>简单说，用户会期待每次滚动都是精确的，而不是一滚就不知道滚到哪里去了，这对提升用户的操作信心很重要。</p>
<p>如果您的 scrollView 每一页的大小是固定的，您可以直接使用 <code>paging</code> 特性实现：</p>
<pre class="swift"><code>scrollView.isPagingEnabled = true</code></pre>
<p>但想必您也注意到了，Taio 的工具栏是对按钮进行分组的，这个时候我们就要自己实现分页算法。</p>
<p>我们第一步要做的事情，是把 scrollView 滚动降速提高，让滚动可以更快地停下来：</p>
<pre class="swift"><code>scrollView.decelerationRate = .fast</code></pre>
<p>仅仅做了这一步，您都会觉得工具栏有很大的提升，因为不会疯狂滚动了。接下来我们使用下面这个代理方法让滚动能够停在精确的位置：</p>
<pre class="swift"><code>func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer&lt;CGPoint&gt;) {

}</code></pre>
<p>这里面您需要自己考虑，最佳的停留位置是哪里。对 Taio 而言，我们选择让它可以精确地停在某个分组开始的地方。</p>
<blockquote>
<p>您可以判断 <code>velocity</code>，让用户在缓慢滚动时，还是可以停留在任何位置。</p>
</blockquote>
<h2 id="光标移动">光标移动</h2>
<p>您可能注意到了，Taio 的工具栏提供了一个光标移动的功能，按一下可以向前或向后移动光标。</p>
<p>但这是不够的，用户期待的是，按住它的时候，光标可以持续性地移动，并且移动速度会逐渐加快。就像按住删除键那样，会产生快感。</p>
<p>我们通过设置一个 <code>Timer</code>，配合上述的 <code>InputClick</code> 音效，在反复调整移动速度的变化方式之后，终于得到了一个很接近删除键的效果。</p>
<h2 id="为-ipad-优化">为 iPad 优化</h2>
<p>前面我们提到了 <code>inputView</code> 的作用，这种交互无法应用在连接了外接键盘的 iPad 上面，因为键盘会被藏起来。</p>
<p>在这种情况下，我们会使用一个 <code>Popover</code> 来替代，像是这个样子：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_5.png" width="360" /></p>
<blockquote>
<p>值得注意的是，您不应该使用是否是 iPad 来判断用户所处的环境。因为 iPad 在分屏的时候，可以长得和 iPhone 差不多，而且 iPad 的键盘还可以悬停。</p>
</blockquote>
<h2 id="standard-edit-actions">Standard Edit Actions</h2>
<p>因为 Markdown 支持粗体、斜体等样式，所以很自然地，我们希望用户也可以通过 <code>UIMenuController</code> 的方式控制格式，这可以通过 <code>UIResponderStandardEditActions</code> 来完成：</p>
<pre class="swift"><code>override func toggleBoldface(_ sender: Any?) {

}

override func toggleItalics(_ sender: Any?) {

}

override func toggleUnderline(_ sender: Any?) {

}</code></pre>
<p>iOS 都帮您做好了，您只需要把已有的实现链接到这几个方法里面即可。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_6.png" width="360" /></p>
<p>但这产生了副作用，在 iPad 的输入栏上面，现在会出现一个多余的 BIU 按钮，这和我们工具栏上的完全重复了。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_7.png" width="360" /></p>
<p>没问题，我们通过覆盖 <code>inputAssistantItem</code> 的方式把它去掉：</p>
<pre class="swift"><code>view.inputAssistantItem.trailingBarButtonGroups = []</code></pre>
<p>当然，如果您觉得有必要的话，也可以把它们设置成别的按钮。</p>
<h2 id="更多内容">更多内容</h2>
<p>正如我们之前提到的那样，文本编辑绝非易事，我们也做了许多工作。</p>
<p>本文分享的内容仅仅是很小的一部分，请关注后续更多有趣的内容。</p>
<blockquote>
<p>[!NOTE] 2020 年 12 月 16 日</p>
</blockquote>]]></description>
    <pubDate>Thu, 24 Dec 2020 22:26:17 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[现代文件应用]]></title>
    <link>https://dev.taio.app/#/cn/editor/files</link>
    <guid isPermaLink="false">https://dev.taio.app/#/cn/editor/files</guid>
    <description><![CDATA[<h1 id="现代文件应用">现代文件应用</h1>
<p>Taio 的 Markdown 编辑器基于完全开放的文件系统，这为应用协作以及数据迁移提供了基础，本文将介绍开发此类应用需要注意到的点。</p>
<p>当然，这一切都以您希望成为 iOS 平台上的良好公民、为优秀的生态贡献力量为基础。如果您最初的想法就是创建封闭的文件或格式，恐怕本文不会对您有什么帮助。</p>
<h2 id="文件共享">文件共享</h2>
<p>早期的 iOS 并不具备做到这些优秀特性的基础，直到 Apple 发布了<a href="https://support.apple.com/zh-cn/HT206481">文件应用</a>，以及一系列为文件共享而生的 API。</p>
<p>文件应用为共享的文件提供了统一的用户界面，开发者可以通过在 <code>Info.plist</code> 内开启 <code>UIFileSharingEnabled</code> 来将 <code>Documents</code> 目录暴露给文件应用。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">&lt;key&gt;</span>UIFileSharingEnabled<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">&lt;true/&gt;</span></a></code></pre></div>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_8.png" width="360"></p>
<h2 id="icloud-云盘">iCloud 云盘</h2>
<p>上面提到的 <code>Documents</code> 目录是本地的，iOS 也提供了云存储方案 <code>iCloud Drive</code>，它有很多好处：</p>
<ul>
<li>使用 iCloud 账号，无需自建用户系统，用户无需额外的登录</li>
<li>与文件管理相关的 API 无缝结合</li>
<li>基于用户的 iCloud 额度，开发者无需为此付费</li>
</ul>
<p>所以在 iOS 上创建文档同步，iCloud Drive 是不二之选。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_9.png" width="360"></p>
<p>其使用方式也很简单，只需为应用分配一个 iCloud Container，然后在应用内使用 <a href="https://developer.apple.com/documentation/foundation/filemanager">FileManager</a> 的如下方法去获取路径：</p>
<pre class="swift"><code>let url = FileManager.default.url(forUbiquityContainerIdentifier: nil)</code></pre>
<p>程序需要处理 <code>url</code> 为 <code>nil</code> 的情况，例如用户未登录 iCloud，或未授予应用 iCloud Drive 权限。</p>
<blockquote>
<p>当权限发生变化时，系统会发出 <a href="https://developer.apple.com/documentation/foundation/nsnotification/name/1407629-nsubiquityidentitydidchange">NSUbiquityIdentityDidChange</a> 通知，可以监听此通知来处理界面变化。</p>
</blockquote>
<h2 id="file-provider">File Provider</h2>
<p>上述两种方式分别为本地文件和 iCloud 文件提供了文件应用的支持，但仍然无法处理文件处于别的位置的情况。例如支持 Extensions 的应用可能会将文件存放在 <a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html">Shared Container</a> 方便主应用和 Extension 同时使用。</p>
<p>对于这种情况，我们可以采用 <a href="https://developer.apple.com/documentation/fileprovider">File Provider Extension</a> 来为文件应用提供文件。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_10.png" width="360"></p>
<p>File Provider 的开发并不复杂，推荐参考 <a href="https://ish.app/">ish</a> 应用的 <a href="https://github.com/ish-app/ish/tree/master/app/FileProvider">File Provider</a> 完整实现，在此便不再赘述。</p>
<blockquote>
<p>此外，您的应用还可以支持 <a href="https://developer.apple.com/documentation/fileproviderui">File Provider UI Extension</a>，它可以为文件应用提供自定义的操作。</p>
</blockquote>
<h2 id="document-types">Document types</h2>
<p>应用可以在 <code>Info.plist</code> 文件注册接受的文件类型，例如：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">&lt;dict&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2">  <span class="kw">&lt;key&gt;</span>CFBundleTypeName<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3">  <span class="kw">&lt;string&gt;</span>Markdown File<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4">  <span class="kw">&lt;key&gt;</span>LSHandlerRank<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5">  <span class="kw">&lt;string&gt;</span>Owner<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6">  <span class="kw">&lt;key&gt;</span>LSItemContentTypes<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7">  <span class="kw">&lt;array&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8">    <span class="kw">&lt;string&gt;</span>net.daringfireball.markdown<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9">  <span class="kw">&lt;/array&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="kw">&lt;/dict&gt;</span></a></code></pre></div>
<p>这样便可接收来自 AirDrop 或 Share Sheet 分享的文件，然后使用 <code>AppDelegate</code> 或 <code>SceneDelegate</code> (Multiple Windows) 相关的方法进行处理。</p>
<p>为了让体验更好，我们可以支持导入目录，而不仅仅是单个文件：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">&lt;dict&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2">  <span class="kw">&lt;key&gt;</span>CFBundleTypeName<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3">  <span class="kw">&lt;string&gt;</span>Folder<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4">  <span class="kw">&lt;key&gt;</span>CFBundleTypeOSTypes<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5">  <span class="kw">&lt;array&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6">    <span class="kw">&lt;string&gt;</span>fold<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7">  <span class="kw">&lt;/array&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8">  <span class="kw">&lt;key&gt;</span>CFBundleTypeRole<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9">  <span class="kw">&lt;string&gt;</span>Viewer<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10">  <span class="kw">&lt;key&gt;</span>LSHandlerRank<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11">  <span class="kw">&lt;string&gt;</span>Default<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12">  <span class="kw">&lt;key&gt;</span>LSItemContentTypes<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13">  <span class="kw">&lt;array&gt;</span></a>
<a class="sourceLine" id="cb4-14" title="14">    <span class="kw">&lt;string&gt;</span>public.folder<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb4-15" title="15">  <span class="kw">&lt;/array&gt;</span></a>
<a class="sourceLine" id="cb4-16" title="16"><span class="kw">&lt;/dict&gt;</span></a></code></pre></div>
<blockquote>
<p>Taio 在接收到目录后，会引导用户将其保存至某个位置。</p>
</blockquote>
<h2 id="exported-type-identifiers">Exported Type Identifiers</h2>
<p>除了接收文件，应用也可以定义专属的文件类型。例如 Taio 的动作其本质是一个 JSON 文件，我们将其定义为了 <code>taioactions</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">&lt;dict&gt;</span></a>
<a class="sourceLine" id="cb5-2" title="2">  <span class="kw">&lt;key&gt;</span>UTTypeConformsTo<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb5-3" title="3">  <span class="kw">&lt;array&gt;</span></a>
<a class="sourceLine" id="cb5-4" title="4">    <span class="kw">&lt;string&gt;</span>public.json<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb5-5" title="5">  <span class="kw">&lt;/array&gt;</span></a>
<a class="sourceLine" id="cb5-6" title="6">  <span class="kw">&lt;key&gt;</span>UTTypeDescription<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb5-7" title="7">  <span class="kw">&lt;string&gt;</span>FileTypeTaioActionsDescription<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb5-8" title="8">  <span class="kw">&lt;key&gt;</span>UTTypeIdentifier<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb5-9" title="9">  <span class="kw">&lt;string&gt;</span>app.cyan.taio-actions<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb5-10" title="10">  <span class="kw">&lt;key&gt;</span>UTTypeTagSpecification<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb5-11" title="11">  <span class="kw">&lt;dict&gt;</span></a>
<a class="sourceLine" id="cb5-12" title="12">    <span class="kw">&lt;key&gt;</span>public.filename-extension<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb5-13" title="13">    <span class="kw">&lt;string&gt;</span>taioactions<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb5-14" title="14">    <span class="kw">&lt;key&gt;</span>public.mime-type<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb5-15" title="15">    <span class="kw">&lt;string&gt;</span>application/json<span class="kw">&lt;/string&gt;</span></a>
<a class="sourceLine" id="cb5-16" title="16">  <span class="kw">&lt;/dict&gt;</span></a>
<a class="sourceLine" id="cb5-17" title="17"><span class="kw">&lt;/dict&gt;</span></a></code></pre></div>
<p>用户可以看到明确的类型描述，别的应用也可以将此类型注册为支持的类型：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_11.png" width="360"></p>
<blockquote>
<p>上述 <code>FileTypeTaioActionsDescription</code> 为可本地化字符串的 Key。</p>
</blockquote>
<h2 id="uidocumentbrowserviewcontroller">UIDocumentBrowserViewController</h2>
<p>如果您的应用是完全基于文档的，基于 <a href="https://developer.apple.com/documentation/uikit/uidocumentbrowserviewcontroller">UIDocumentBrowserViewController</a> 来实现可能是一个很好的方式，Apple 的 <a href="https://www.apple.com/iwork/">iWork</a> 三件套正是基于这个方式实现。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_12.png" width="360"></p>
<p>不过 Taio 并没有这样实现，因为我们想要更多交互上的灵活性，而 Apple <a href="https://developer.apple.com/documentation/uikit/view_controllers/adding_a_document_browser_to_your_app">文档</a>明确指出：</p>
<blockquote>
<p>Always assign the document browser as your app’s root view controller. Don’t place the document browser in a navigation controller, tab bar, or split view, and don’t present the document browser modally.</p>
</blockquote>
<p>此外，如果需要在应用内打开文件选择器，应该使用 <a href="https://developer.apple.com/documentation/uikit/uidocumentpickerviewcontroller">UIDocumentPickerViewController</a> 而不是 UIDocumentBrowserViewController。</p>
<p>关于这个部分，您可以参考开源项目 <a href="https://github.com/louisdh/textor">textor</a> 了解更多。</p>
<h2 id="open-in-place">Open in Place</h2>
<p>上面我们提到了在应用内打开外部文件的方法，该方法会在应用内创建文件拷贝。而 <code>Open in Place</code> 则可以直接打开其他应用的文件，并直接编辑它们本身。</p>
<p>方法是在 <code>Info.plist</code> 内指定：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">&lt;key&gt;</span>LSSupportsOpeningDocumentsInPlace<span class="kw">&lt;/key&gt;</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">&lt;true/&gt;</span></a></code></pre></div>
<p>和文件导入类似的，您需要处理 <code>SceneDelegate</code> 的方法，<code>UIOpenURLContext</code> 告诉了您是否属于 Open in Place 操作：</p>
<pre class="swift"><code>if context.options.openInPlace {

}</code></pre>
<p>应用如需访问 Open in Place 的文件，需要使用 <a href="https://developer.apple.com/documentation/foundation/url">URL</a> 的两个方法：</p>
<ul>
<li><a href="https://developer.apple.com/documentation/foundation/url/1779698-startaccessingsecurityscopedreso">startAccessingSecurityScopedResource</a></li>
<li><a href="https://developer.apple.com/documentation/foundation/url/1780153-stopaccessingsecurityscopedresou">stopAccessingSecurityScopedResource</a></li>
</ul>
<p>此外，支持 Open in Place 后，长按 iPad 应用的桌面图标会显示最近访问的文件：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_13.png" width="360"></p>
<blockquote>
<p><a href="https://docs.taio.app/#/cn/integration/working-copy">Working Copy</a> 应用的作者为 Open in Place 创建了很好的<a href="https://github.com/palmin/open-in-place">示例项目</a>，推荐参考。</p>
</blockquote>
<h2 id="文件书签">文件书签</h2>
<p>URL 的 <a href="https://developer.apple.com/documentation/foundation/url/2143023-bookmarkdata">bookmarkData</a> 接口并不是新内容：</p>
<pre class="swift"><code>let bookmarkData = try url.bookmarkData()</code></pre>
<p>您可以用来记录最近访问的文件，通过 <code>resolvingBookmarkData</code> 将其还原成文件路径：</p>
<pre class="swift"><code>let url = try URL(
  resolvingBookmarkData: data,
  bookmarkDataIsStale: &amp;bookmarkIsStale
)</code></pre>
<p>即便文件被移动，我们依然可以正确地取回其路径。相比起这个优势，文件书签可以用来存储 Open in Place 的文件，以便下次访问。</p>
<p>或者，存储使用 <code>UIDocumentPickerViewController</code> 打开的文件或目录，让其可以随时被访问。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_14.png" width="360"></p>
<p>Taio 支持这个特性，所以用户可以在 Taio 内随时编辑链接好的第三方文件。</p>
<h2 id="uidocument">UIDocument</h2>
<p><a href="https://developer.apple.com/documentation/uikit/uidocument">UIDocument</a> 提供了一系列对文档的封装，让开发者可以更方便地处理文件打开、保存，以及状态变化，可以参考上面提到的 <a href="https://github.com/louisdh/textor">textor</a> 项目中的一些例子，我们在这里重点关于其冲突处理。</p>
<p>文件的版本冲突，在多端编辑或者多个应用编辑里面是很常见的。我们可能在 Client A 和 Client B 里同时编辑了某文件，然后在某设备上产生了多个副本。</p>
<p><a href="https://developer.apple.com/documentation/foundation/nsfileversion">NSFileVersion</a> 提供了获取冲突版本的方法：</p>
<pre class="swift"><code>let versions = NSFileVersion.unresolvedConflictVersionsOfItem(at: url)</code></pre>
<p>参考 <a href="https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/DocumentBasedAppPGiOS/ResolveVersionConflicts/ResolveVersionConflicts.html">Apple 文档</a>，程序可以设计为用户解决冲突的策略，例如总是使用最新的版本。不过 Taio 是一个文本编辑器，我们觉得让用户对比差异是一个更棒的想法：</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_15.png" width="360"></p>
<p>这样一来，用户总是对版本的变化充满信心，同样的交互也用在了 Taio 的历史版本功能。</p>
<h2 id="textbundle">TextBundle</h2>
<p><a href="http://textbundle.org/">TextBundle</a> 作为一个开放的标准，为跨应用的文件共享进一步地提供了方便。</p>
<p>一个 TextBundle 目录内，包含了元数据和一个主要的文本文档，以及用于放置图片资源的 <code>assets</code> 目录。</p>
<p><img src="https://github.com/cyanzhong/dev.taio.app/raw/master/docs/editor/assets/IMG_16.png" width="360"></p>
<p>这样的格式，可以将文档和其引用的资源打包成一个文件，在支持 TextBundle 的应用间共享。</p>
<p>可以参考 TextBundle 的<a href="http://textbundle.org/spec/">标准描述</a>来了解如何实现，或参考开源的 <a href="https://github.com/shinyfrog/TextBundle">TextBundle</a> 项目。</p>
<blockquote>
<p>上述项目也是一个 <a href="https://developer.apple.com/documentation/foundation/filewrapper">FileWrapper</a> 的示例。</p>
</blockquote>
<h2 id="trash-操作">Trash 操作</h2>
<p>相比直接删除文件，应用也可以使用 FileManager 的 <code>trashItem</code> 方法：</p>
<pre class="swift"><code>try FileManager.default.trashItem(at: url, resultingItemURL: &amp;resultingURL)</code></pre>
<p>通过这个方法移除的文件，会跑到文件应用的 <code>最近删除</code> 目录，用户可以恢复。该方法实际上为文件创建了一个 <code>.Trash</code> 隐藏目录，并且会自动处理命名问题。</p>
<h2 id="更多内容">更多内容</h2>
<p>我们可以看到，想要让基于文件的应用体验上乘并不容易，Taio 为此做了很多工作，并且还有很多优化空间。</p>
<p>Apple 提供了针对文件应用的一系列教程，例如 <a href="https://developer.apple.com/document-based-apps/">Document Based Apps</a>，以及在 WWDC 上发布的一系列相关课程，推荐进行进一步的了解。</p>
<p>最后，感谢在文中引用的第三方内容为生态做出的贡献。</p>
<blockquote>
<p>[!NOTE] 2020 年 12 月 24 日</p>
</blockquote>]]></description>
    <pubDate>Thu, 24 Dec 2020 22:26:17 +0800</pubDate>
  </item>
  
</channel>
</rss>
